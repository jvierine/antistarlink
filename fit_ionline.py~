import h5py
import numpy as n
import matplotlib.pyplot as plt
import scipy.constants as c
import isr_spec.il_interp as il
import scipy.interpolate as si
import scipy.optimize as so

ilf=il.ilint(fname="isr_spec/ion_line_interpolate.h5")

def model_acf(te,ti,mol_frac,vi,lags):
    dop_shift=2*n.pi*2*440.2e6*vi/c.c
    csin=n.exp(1j*dop_shift*lags)
    model=ilf.getspec(ne=n.array([1e11]),
                      te=n.array([te]),
                      ti=n.array([ti]),
                      mol_frac=n.array([mol_frac]),
                      vi=n.array([0.0]),
                      acf=True
                      )[0,:]
    model=model/model[0].real
    acff=si.interp1d(ilf.lag,model)
    return(acff(lags)*csin)


def fit_acf(acf,lags,rgs,var):

    print(acf)
    print(n.sqrt(var))
    # 2x for ground clutter 3x for correlated lags
    std=n.sqrt(2*3*var)/acf[0].real
    print(std)
    # normalize all range gates to unity
    nacf=acf/acf[0].real

    def ss(x):
        te_ti=x[0]
        ti=x[1]
        vi=x[2]
        zl=x[3]
        
        model=zl*model_acf(te_ti*ti,ti,0.0,vi,lags)
        ssq=n.sum(n.abs(model-nacf)**2.0)
        print(ssq)
        return(ssq)
    
    xhat=so.fmin(ss,[1.5,1500,0.0,1])
    print(xhat)
    model=xhat[3]*model_acf(xhat[0]*xhat[1],xhat[1],0,xhat[2],lags)
    plt.plot(lags,model.real)
    plt.plot(lags,model.imag)    
    
    
    plt.errorbar(lags,nacf.real,yerr=2*std)
    plt.errorbar(lags,nacf.imag,yerr=2*std)
    plt.show()
    
    pass



if __name__ == "__main__":
    h=h5py.File("avg.h5","r")
    acf=h["acf"][()]
    var=n.real(h["var"][()])
    lag=h["lag"][()]
    rgs=h["rgs"][()]

    ri=19
    fit_acf(acf[ri,:],lag,rgs,var[ri,:])

        
        
    h.close()
